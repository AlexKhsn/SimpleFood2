@mixin pseudo($pos: absolute, $content: ""){
    content: $content;
    position: $pos;
};

@mixin mq($width, $type: max) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }

    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
};

@mixin mqheight($height, $type: max) {
  @if map_has_key($breakpoints, $height) {
    $height: map_get($breakpoints, $height);
    @if $type == max {
      $height: $height - 1px;
    }

    @media only screen and (#{$type}-height: $height) {
      @content;
    }
  }
};

@mixin line-clamp($lines: 1) {
  @if $lines <=1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  @else {
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
  }
};

@mixin burger-btn {
	position: relative;
  width: $burgerBtnWidth;
	height: $burgerBtnHeight;
	color: $burgerBtnColor;
  padding-left: 22px;
  padding-right: 22px;
  padding-top: 22px;
  padding-bottom: 22px;

  &__line { 
    position: relative;
    left: 50%;
    transform: translateX(-50%);
    display: block;
    width: $burgerBtnWidth;
    height: $burgerBtnLineHeight;
    background-color: currentColor;

    &::before,
    &::after { 
    content: "";
    position: absolute;
    left: 0;
    width: 100%;
    height: $burgerBtnLineHeight;
    background-color: currentColor;
    }

    &::before { 
      bottom: calc($burgerBtnLineHeight + $burgerBtnSpaceBetween);
    }

    &::after { 
      top: calc($burgerBtnLineHeight + $burgerBtnSpaceBetween);
    }
  }
}